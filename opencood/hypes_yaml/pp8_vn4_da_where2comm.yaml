name: pp8_vn4_da_where2comm
root_dir: 'dataset/train'
validate_dir: 'dataset/validate'
model_dir: 'model/'

yaml_parser: "load_pp_pp_params"
train_params:
  batch_size: &batch_size 4
  epoches: 60
  eval_freq: 1
  save_freq: 1
  max_cav: &max_cav 5

fusion:
  core_method: 'IntermediateFusionDatasetV3' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args: 
    same_data: false
    full_data: false
    flip_data: true
    is_augment: false

# preprocess-related
preprocess_q:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size_q [0.8, 0.8, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]
  
# preprocess-related
preprocess_k:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size_k [0.4, 0.4, 0.4]
    max_points_per_voxel: &T 32
    max_voxel_train: 36000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: [-140.8, -40, -3, 140.8, 40, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  voxel_size: *voxel_size_q
  cav_lidar_range: *cav_lidar
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: da
  args:
    encoder_q:
      core_method: point_pillar_encoder
      saved_pth: opencood/pre_train_modules/point_pillar_xyres8.pth
      args:
        voxel_size: *voxel_size_q
        lidar_range: *cav_lidar
        anchor_number: *achor_num
        max_cav: *max_cav
        channel: 256
        featrue_size: [50,176]

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
          
        point_pillar_scatter:
          num_features: 64

        base_bev_backbone:
          layer_nums: &layer_nums [3, 5]
          layer_strides: [2, 2]
          num_filters: &num_filters [64, 128]
          upsample_strides: [1, 2]
          num_upsample_filter: [128, 128]

    encoder_k:
      core_method: voxel_net_encoder
      saved_pth: opencood/pre_train_modules/voxel_net_xyres4.pth
      args:
        N: *batch_size
        T: *T
        voxel_size: *voxel_size_k
        lidar_range: *cav_lidar
        anchor_number: *achor_num
        max_cav: *max_cav
        channel: 128
        featrue_size: [200,704]

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]

        point_pillar_scatter:
          num_features: 64
      
    resizer:
      input_channel:  128
      output_channel: &input_dim_res 256
      wg_att:
        input_dim: 256
        mlp_dim: 256
        window_size: 2
        dim_head: 32
        drop_out: 0.1
        depth: 1
      residual:
        input_dim: *input_dim_res
        depth: 2

    cdt:
      input_dim: 256
      window_size: 2
      dim_head: 32
      heads: 16
      depth: 1
    
    fusion_net:
      core_method: where2comm
      fully: False
      voxel_size: *voxel_size_q
      downsample_rate: 4
      in_channels: 256
      multi_scale: false
      layer_nums: *layer_nums
      num_filters: *num_filters
      communication:
        round: 1
        threshold: 0.01
        gaussian_smooth:
          k_size: 5
          c_sigma: 1.0

    anchor_num: *achor_num
    

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0
    da: true

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 50, 80]

