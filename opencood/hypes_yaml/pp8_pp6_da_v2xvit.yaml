name: pp8_pp6_da_v2xvit
root_dir: 'dataset/train'
validate_dir: 'dataset/validate'
model_dir: 'model/'

wild_setting:
  async: false
  async_mode: 'sim'
  async_overhead: 100
  seed: 25
  loc_err: false
  xyz_std: 0.2
  ryp_std: 0.2
  data_size: 1.06 # Mb!!
  transmission_speed: 27 # Mbps!!
  backbone_delay: 10 # ms

yaml_parser: "load_pp_pp_params"
train_params:
  batch_size: &batch_size 2
  epoches: 60
  eval_freq: 5
  save_freq: 1
  max_cav: &max_cav 5

fusion:
  core_method: 'IntermediateFusionDatasetV3' # LateFusionDataset, EarlyFusionDataset, IntermediateFusionDataset supported
  args: 
    same_data: false
    full_data: false
    flip_data: true
    is_augment: false

# preprocess-related
preprocess_q:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size_q [0.8, 0.8, 4]
    max_points_per_voxel: 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range: &cav_lidar [-140.8, -40, -3, 140.8, 40, 1]
  
  
# preprocess-related
preprocess_k:
  # options: BasePreprocessor, VoxelPreprocessor, BevPreprocessor
  core_method: 'SpVoxelPreprocessor'
  args:
    voxel_size: &voxel_size_k [0.6, 0.6, 4]
    max_points_per_voxel: &T 32
    max_voxel_train: 32000
    max_voxel_test: 70000
  # lidar range for each individual cav.
  cav_lidar_range:  &cav_lidar_k [-153.6, -38.4, -3, 153.6, 38.4, 1]

data_augment:
  - NAME: random_world_flip
    ALONG_AXIS_LIST: [ 'x' ]

  - NAME: random_world_rotation
    WORLD_ROT_ANGLE: [ -0.78539816, 0.78539816 ]

  - NAME: random_world_scaling
    WORLD_SCALE_RANGE: [ 0.95, 1.05 ]

# anchor box related
postprocess:
  core_method: 'VoxelPostprocessor' # VoxelPostprocessor, BevPostprocessor supported
  anchor_args:
    cav_lidar_range: *cav_lidar
    l: 3.9
    w: 1.6
    h: 1.56
    r: [0, 90]
    feature_stride: 2
    num: &achor_num 2
  target_args:
    pos_threshold: 0.6
    neg_threshold: 0.45
    score_threshold: 0.20
  voxel_size: *voxel_size_q
  cav_lidar_range: *cav_lidar
  order: 'hwl' # hwl or lwh
  max_num: 100 # maximum number of objects in a single frame. use this number to make sure different frames has the same dimension in the same batch
  nms_thresh: 0.15

# model related
model:
  core_method: da
  args:
    encoder_q:
      core_method: point_pillar_encoder
      saved_pth: opencood/pre_train_modules/point_pillar_xyres8.pth
      args:
        voxel_size: *voxel_size_q
        lidar_range: *cav_lidar
        anchor_number: *achor_num
        max_cav: *max_cav
        channel: 256
        featrue_size: [50,176]

        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
          
        point_pillar_scatter:
          num_features: 64

        base_bev_backbone:
          layer_nums: [3, 5]
          layer_strides: [2, 2]
          num_filters: [64, 128]
          upsample_strides: [1, 2]
          num_upsample_filter: [128, 128]

    encoder_k:
      core_method: point_pillar_encoder
      saved_pth: opencood/pre_train_modules/point_pillar_xyres6.pth
      args:
        voxel_size: *voxel_size_k
        lidar_range: *cav_lidar_k
        anchor_number: *achor_num
        max_cav: *max_cav
        channel: &c_k 384
        featrue_size: &s_k [64,256]
    
        pillar_vfe:
          use_norm: true
          with_distance: false
          use_absolute_xyz: true
          num_filters: [64]
        point_pillar_scatter:
          num_features: 64

        base_bev_backbone:
          layer_nums: [3, 5, 8]
          layer_strides: [2, 2, 2]
          num_filters: [64, 128, 256]
          upsample_strides: [1, 2, 4]
          num_upsample_filter: [128, 128, 128]
      
    resizer:
      input_channel:  384
      output_channel: &input_dim_res 256
      wg_att:
        input_dim: 256
        mlp_dim: 256
        window_size: 2
        dim_head: 32
        drop_out: 0.1
        depth: 1
      residual:
        input_dim: *input_dim_res
        depth: 2

    cdt:
      input_dim: 256
      window_size: 2
      dim_head: 32
      heads: 16
      depth: 1
    
    fusion_net:
      core_method: v2xvit
      encoder: &encoder
        # number of fusion blocks per encoder layer
        num_blocks: 1
        # number of encoder layers
        depth: 3
        use_roi_mask: true
        use_RTE: &use_RTE true
        RTE_ratio: &RTE_ratio 2 # 2 means the dt has 100ms interval while 1 means 50 ms interval
        # agent-wise attention
        cav_att_config: &cav_att_config
          dim: 256
          use_hetero: true
          use_RTE: *use_RTE
          RTE_ratio: *RTE_ratio
          heads: 8
          dim_head: 32
          dropout: 0.3
        # spatial-wise attention
        pwindow_att_config: &pwindow_att_config
          dim: 256
          heads: [16, 8, 4]
          dim_head: [16, 32, 64]
          dropout: 0.3
          window_size: [2, 2, 2]
          relative_pos_embedding: true
          fusion_method: 'split_attn'
        # feedforward condition
        feed_forward: &feed_forward
          mlp_dim: 256
          dropout: 0.3
        sttf: &sttf
          voxel_size: *voxel_size_q
          downsample_rate: 2

    anchor_num: *achor_num
    

loss:
  core_method: point_pillar_loss
  args:
    cls_weight: 1.0
    reg: 2.0
    da: true

optimizer:
  core_method: Adam
  lr: 0.001
  args:
    eps: 1e-10
    weight_decay: 1e-4

lr_scheduler:
  core_method: multistep #step, multistep and Exponential support
  gamma: 0.1
  step_size: [10, 50, 80]

